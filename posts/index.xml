<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Intranautic</title>
    <link>https://intranautic.com/posts/</link>
    <description>Recent content in Posts on Intranautic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://intranautic.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Glibc PTMalloc Internals</title>
      <link>https://intranautic.com/posts/glibc-ptmalloc-internals/</link>
      <pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://intranautic.com/posts/glibc-ptmalloc-internals/</guid>
      <description>The GNU C Library is a complex library, and it&amp;rsquo;s default memory allocator PTMalloc (Posix Thread aware malloc) is no exception to this rule. Within this blog post, I will attempt to document the internals of this allocator, as well as it&amp;rsquo;s evolution throughout the years.
This post is primarily an in depth analysis and a collection of notes which I have amassed throughout the years of being bombarded with heapnote challenges.</description>
    </item>
    
  </channel>
</rss>
