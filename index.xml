<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Intranautic</title>
    <link>https://intranautic.com/</link>
    <description>Recent content in Home on Intranautic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://intranautic.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SEFCOM Research Internship Part 1</title>
      <link>https://intranautic.com/posts/sefcom-intern-part-1/</link>
      <pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://intranautic.com/posts/sefcom-intern-part-1/</guid>
      <description>This summer I am attending a high school research internship at the SEFCOM lab with Zion Basque (mahaloz) serving as my mentor. This is the first part in a series of blog posts in which I document my work and findings throughout the course of the internship.
My current work within the internship has largely centered around implementing additional optimization and simplification passes to the angr decompiler with the goal of improving structuring decisions in decompilation.</description>
    </item>
    
    <item>
      <title>Pwnable.tw: Unexploitable</title>
      <link>https://intranautic.com/posts/pwnabletw-unexploitable/</link>
      <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://intranautic.com/posts/pwnabletw-unexploitable/</guid>
      <description>unexploitable [500 pts]
The original challenge is on pwnable.kr and it is solvable.
This time we fix the vulnerability and now we promise that the service is unexploitable.
nc chall.pwnable.tw 10403
unexploitable libc.so
Initial Analysis By running checksec, we can view the protections and memory corruption mitigations enabled on this binary.
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) As we can see, the only protection enable is NX, which means the stack is non executable.</description>
    </item>
    
    <item>
      <title>Sigreturn Oriented Programming</title>
      <link>https://intranautic.com/posts/sigreturn-oriented-programming/</link>
      <pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://intranautic.com/posts/sigreturn-oriented-programming/</guid>
      <description>Throughout the years, there have been a multitude of techniques which arose to take advantage of and exploit various mechanisms present within software. One such technique takes advantage of the signal handling routine of Unix based operating systems to gain arbitrary code execution.
Within this post, I will be covering the technique known as sigreturn oriented programming, as well as various properties it possesses which allows us to construct a weird machine.</description>
    </item>
    
    <item>
      <title>Pwnable.tw: Secret Garden</title>
      <link>https://intranautic.com/posts/pwnabletw-secretgarden/</link>
      <pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://intranautic.com/posts/pwnabletw-secretgarden/</guid>
      <description>Secret Garden [350 pts]
Find the flag in the garden.
nc chall.pwnable.tw 10203
secretgarden libc.so secretgarden.bndb
Initial Analysis When initially executing the binary, we can see that we are prompted with the following menu.
☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ Secret Garden ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ 1 .</description>
    </item>
    
    <item>
      <title>Glibc PTMalloc Internals</title>
      <link>https://intranautic.com/posts/glibc-ptmalloc-internals/</link>
      <pubDate>Thu, 08 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://intranautic.com/posts/glibc-ptmalloc-internals/</guid>
      <description>The GNU C Library is a complex library, and it&amp;rsquo;s default memory allocator PTMalloc (Posix Thread aware malloc) is no exception to this rule. Within this blog post, I will attempt to document the internals of this allocator, as well as it&amp;rsquo;s evolution throughout the years.
This post is primarily an in depth analysis and a collection of notes which I have amassed throughout the years of being bombarded with heapnote challenges.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://intranautic.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://intranautic.com/about/</guid>
      <description>Hello, I’m Intranautic. (￣▽￣)ノ
My interests include programming, compiler theory, theoretical computer science, program analysis, vulnerability research and playing CTFs ∈ {pwn, rev} with Shellphish.
Feel free to look around, this site is primarily a place to store and archive challenge writeups, explanations, notes on topics I’m currently researching, or just rants.
If you want to reach out to me, you can do so via one of the contacts below or directly via discord @ intranautic#9885.</description>
    </item>
    
  </channel>
</rss>
