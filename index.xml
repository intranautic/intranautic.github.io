<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Intranautic</title>
    <link>https://intranautic.com/</link>
    <description>Recent content in Home on Intranautic</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Jul 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://intranautic.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SEFCOM Research Internship</title>
      <link>https://intranautic.com/posts/sefcom-intern/</link>
      <pubDate>Sun, 09 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://intranautic.com/posts/sefcom-intern/</guid>
      <description>&lt;p&gt;This summer I had decided to attend a high school research internship at the &lt;a href=&#34;https://sefcom.asu.edu/&#34;&gt;SEFCOM&lt;/a&gt; lab with Zion Basque also known as&#xA;&lt;a href=&#34;https://twitter.com/mahal0z&#34;&gt;mahaloz&lt;/a&gt; serving as my mentor. Within this post I will document my work and findings throughout the course of the internship, as well as various insights I have acquired as a result.&lt;/p&gt;&#xA;&lt;p&gt;My work throughout the course of the internship was largely centered around implementing simplifcation passes with the goal of improving readability. I had implemented it within the &lt;a href=&#34;https://github.com/angr/angr&#34;&gt;angr&lt;/a&gt; decompiler.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pwnable.tw: Unexploitable</title>
      <link>https://intranautic.com/posts/pwnabletw-unexploitable/</link>
      <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://intranautic.com/posts/pwnabletw-unexploitable/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;unexploitable [500 pts]&lt;/p&gt;&#xA;&lt;p&gt;The original challenge is on pwnable.kr and it is solvable.&lt;/p&gt;&#xA;&lt;p&gt;This time we fix the vulnerability and now we promise that the service is unexploitable.&lt;/p&gt;&#xA;&lt;p&gt;nc chall.pwnable.tw 10403&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://pwnable.tw/static/chall/unexploitable&#34;&gt;unexploitable&lt;/a&gt;&#xA;&lt;a href=&#34;https://pwnable.tw/static/libc/libc_64.so.6&#34;&gt;libc.so&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;initial-analysis&#34;&gt;Initial Analysis&lt;/h1&gt;&#xA;&lt;p&gt;By running &lt;code&gt;checksec&lt;/code&gt;, we can view the protections and memory corruption mitigations&#xA;enabled on this binary.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Arch:     amd64-64-little&#xA;RELRO:    Partial RELRO&#xA;Stack:    No canary found&#xA;NX:       NX enabled&#xA;PIE:      No PIE (0x400000)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As we can see, the only protection enable is NX, which means the stack is non executable.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sigreturn Oriented Programming</title>
      <link>https://intranautic.com/posts/sigreturn-oriented-programming/</link>
      <pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://intranautic.com/posts/sigreturn-oriented-programming/</guid>
      <description>&lt;p&gt;Throughout the years, there have been a multitude of techniques which arose to take advantage&#xA;of and exploit various mechanisms present within software. One such technique takes advantage&#xA;of the signal handling routine of Unix based operating systems to gain arbitrary code execution.&lt;/p&gt;&#xA;&lt;p&gt;Within this post, I will be covering the technique known as sigreturn oriented programming,&#xA;as well as various properties it possesses which allows us to construct a weird machine. I will&#xA;elaborate on this term, as well as the technique at a later point within this post, but first we&#xA;need to gain a fundamental understanding of what signals are and their implementation within Unix&#xA;based systems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pwnable.tw: Secret Garden</title>
      <link>https://intranautic.com/posts/pwnabletw-secretgarden/</link>
      <pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://intranautic.com/posts/pwnabletw-secretgarden/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Secret Garden [350 pts]&lt;/p&gt;&#xA;&lt;p&gt;Find the flag in the garden.&lt;/p&gt;&#xA;&lt;p&gt;nc chall.pwnable.tw 10203&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://pwnable.tw/static/chall/secretgarden&#34;&gt;secretgarden&lt;/a&gt;&#xA;&lt;a href=&#34;https://pwnable.tw/static/libc/libc_64.so.6&#34;&gt;libc.so&lt;/a&gt;&#xA;&lt;a href=&#34;https://intranautic.com/assets/files/secretgarden.bndb&#34;&gt;secretgarden.bndb&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;initial-analysis&#34;&gt;Initial Analysis&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;When initially executing the binary, we can see that we are prompted with the following&#xA;menu.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆&#xA;☆          Secret Garden          ☆&#xA;☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆&#xA;&#xA;  1 . Raise a flower&#xA;  2 . Visit the garden&#xA;  3 . Remove a flower from the garden&#xA;  4 . Clean the garden&#xA;  5 . Leave the garden&#xA;&#xA;Your choice :&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are given a menu, as well as a few options which provide us with a fair amount of control&#xA;over the process heap. Lets open this up and analyze the internals of this binary, if you are&#xA;using binary ninja a bndb has been provided in the footnote at the start of the post.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Glibc PTMalloc Internals</title>
      <link>https://intranautic.com/posts/glibc-ptmalloc-internals/</link>
      <pubDate>Thu, 08 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://intranautic.com/posts/glibc-ptmalloc-internals/</guid>
      <description>&lt;p&gt;The GNU C Library is a complex library, and it&amp;rsquo;s default memory allocator PTMalloc&#xA;(Posix Thread aware malloc) is no exception to this rule. Within this blog post, I&#xA;will attempt to document the internals of this allocator, as well as it&amp;rsquo;s evolution&#xA;throughout the years.&lt;/p&gt;&#xA;&lt;p&gt;This post is primarily an in depth analysis and a collection of notes which I have&#xA;amassed throughout the years of being bombarded with heapnote challenges. I am creating&#xA;this post partially for my sake as its become very difficult to keep track of the&#xA;differences between each version of Glibc without some form of reference.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>https://intranautic.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://intranautic.com/about/</guid>
      <description>&lt;p&gt;Hello, I’m Intranautic. (￣▽￣)ノ&lt;/p&gt;&#xA;&lt;p&gt;My interests include programming, compiler theory, theoretical computer science,&#xA;program analysis, vulnerability research and playing CTFs ∈ {pwn, rev} with Shellphish.&lt;/p&gt;&#xA;&lt;p&gt;Feel free to look around, this site is primarily a place to store and archive challenge writeups, explanations, notes on topics I’m currently researching, or just rants.&lt;/p&gt;&#xA;&lt;p&gt;If you want to reach out to me, you can do so via one of the contacts below or directly&#xA;via discord @intranautic.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
